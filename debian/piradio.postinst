#!/bin/bash 
# Radio daemon post install script
# $Id: piradio.postinst,v 1.13 2014/07/21 07:56:34 bob Exp $

# File locations
PACKAGE=piradio
DIR=/usr/share/${PACKAGE}
RADIOLIB=/var/lib/${PACKAGE}
CONFIGDIR=/etc/${PACKAGE}/
DEFAULTFILE=/etc/default/${PACKAGE}
INITTAB=/etc/inittab
BOOTCMD=/boot/cmdline.txt 
MODULES=/etc/modules
MPDCONF=/etc/mpd.conf
PODCASTSDIST=podcasts.dist
LOGDIR=/var/log
#export DEBCONF_DEBUG=developer
PIFACE=piface_radio.py
ADA=ada_radio.py


set -e
# Source debconf library.
. /usr/share/debconf/confmodule

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.


# Display types
db_get piradio/lcd
piradio_lcd=$(echo $RET | sed -e 's/^.*(\(.*\.py\)).*/\1/')
db_get piradio/user
piradio_user="$RET"
db_get piradio/group
piradio_group="$RET"

echo running in mode "$@"

case "$1" in
    configure)
	echo "Executing post install script ${0}"
	grep -q -e '^[ 	]*MAINFILE=' ${DEFAULTFILE} || echo 'MAINFILE=' >> ${DEFAULTFILE}
	grep -q -e '^[ 	]*USER=' ${DEFAULTFILE} || echo 'USER=' >> ${DEFAULTFILE}
	grep -q -e '^[ 	]*GROUP=' ${DEFAULTFILE} || echo 'GROUP=' >> ${DEFAULTFILE}
	sed -e "s/^\([ 	]*MAINFILE=\).*/\1${piradio_lcd}/;s/^\([ 	]*USER=\).*/\1${piradio_user}/;s/^\([ 	]*GROUP=\).*/\1${piradio_group}/;" "${DEFAULTFILE}" >"${DEFAULTFILE}.tmp"
	mv "${DEFAULTFILE}.tmp" "${DEFAULTFILE}"
	#sudo mkdir -p ${DIR}/playlists
	mkdir -p "${RADIOLIB}/playlists"
	chown -R "${piradio_user}:${piradio_group}" "${RADIOLIB}"
	#sudo chmod +x ${DIR}/*.py

	case "$piradio_lcd" in
	    radio.py|rradio.py|radio4.py|rradio4.py)
		# Disable serial interface (reboot required)
		echo "Disabling serial interface in ${INITTAB}" 
		if [[ ! -f   ${INITTAB}.orig ]]; then
		    cp -f ${INITTAB} ${INITTAB}.orig
		    echo "# Original file stored as ${INITTAB}.orig" >> ${INITTAB} 
		fi
		OLDENTRY="T0\:23\:respawn\:\/sbin\/getty -L ttyAMA0"
		NEWENTRY="\#T0\:23:respawn\:\/sbin\/getty -L ttyAMA0"
		sed -i "s/^${OLDENTRY}.*/${NEWENTRY}/g" ${INITTAB}

		echo "Disabling serial interface in ${BOOTCMD}" 
		if [[ ! -f   ${BOOTCMD}.orig ]]; then
		    cp -f ${BOOTCMD} ${BOOTCMD}.orig
		    echo "# Original file stored as ${BOOTCMD}.orig" >> ${BOOTCMD} 
		fi

		OLDENTRY="console=ttyAMA0,115200 "
		sed -i "s/${OLDENTRY}//g" ${BOOTCMD}
		OLDENTRY="kgdboc=ttyAMA0,115200 "
		sed -i "s/${OLDENTRY}//g" ${BOOTCMD}
		REBOOT=1
		;;

	    ada_radio.py)	
		# Check to see if the python-smbus is already installed
		if !dpkg -l python-smbus  > /dev/null 2>&1  
		then
		    echo "It is necessary to install the I2C libraries for Adafruit LCD plate"
		    echo "Carry out the following commands:"
		    echo "   sudo dpkg -r ${PACKAGE}"
		    echo "   sudo apt-get install python-smbus"
		    echo "and reinstall this package again"
		    exit 2
		else 
		    REBOOT=1
		fi
		if [[ ! -f   ${MODULES}.orig ]]; then
		    cp -fp ${MODULES} ${MODULES}.orig
		    echo "i2c-bcm2708" >>  ${MODULES}
		    echo "i2c-dev" >>  ${MODULES}
		    echo "# Original file stored as ${MODULES}.orig" >> ${MODULES} 
		    echo
		fi
		;;

	    piface_radio.py)
		if !dpkg -l python-pifacecad > /dev/null 2>&1  
		then
		    echo "It is necessary to install the Piface libraries"
		    echo "Carry out the following commands:"
		    echo "   sudo dpkg -r ${PACKAGE}"
		    echo "   sudo apt-get install python-pifacecad"
		    echo "and reinstall this package again"
		    exit 2
		else 
		    REBOOT=1
		fi
		if [[ ! -f   ${MODULES}.orig ]]; then
		    cp -fp ${MODULES} ${MODULES}.orig
		    echo "spi-bcm2708" >>  ${MODULES}
		    echo "spi-dev" >>  ${MODULES}
		    echo "# Original file stored as ${MODULES}.orig" >> ${MODULES} 
		    echo
		fi
		REBOOT=1
		;;
	    *) 
		echo "No radio daemon selected"
		echo "Run ${DIR}/select_daemon.sh at the end of this installation"
	esac

	update-rc.d -f ${PACKAGE} defaults
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
	piradio_lcd=abort
	REBOOT=0
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

#DEBHELPER#

# 
# # Configure the MPD daemon
# if [[ ! -f   ${MPDCONF}.orig ]]; then
# 	echo "Modifying ${MPDCONF}"
# 	sudo cp -fp ${MPDCONF} ${MPDCONF}.orig
# 	OLDENTRY="bind_to_address"
# 	NEWENTRY="bind_to_address \"any\""  
# 	sudo sed -i "s/^${OLDENTRY}.*/${NEWENTRY}/g" ${MPDCONF}
# 	OLDENTRY="\#zeroconf_enabled.*"
# 	NEWENTRY="zeroconf_enabled \"no\""
# 	sudo sed -i "s/^${OLDENTRY}.*/${NEWENTRY}/g" ${MPDCONF}
# 	echo "# Original file stored as ${MPDCONF}.orig" >> ${MPDCONF} 
# fi
# 
# Disable mpd on startup
#sudo update-rc.d mpd disable

# Go to radio directory
# cd ${DIR}
# 
# # Copy podcast example to the radio lib directory
# if [[ ! -f "${RADIOLIB}/podcasts" ]]; then
# 	echo "Copying ${PODCASTSDIST} to ${RADIOLIB}/podcasts"
# 	mkdir -p ${RADIOLIB}
# 	cp -f ${PODCASTSDIST} ${RADIOLIB}/podcasts
# fi
# 
# # Create playlists if no station list present
# if [[ ! -f "${RADIOLIB}/stationlist" ]]; then
# 	echo "Creating playlists:"
# 	${DIR}/create_playlists.py --no_delete 2>&1 > ${LOGDIR}/playlists.log
# 	echo "See ${DIR}/playlists.log for information about playlists created"
# 	echo
# fi
# 
# End of installation
echo
echo "PI Radio software successfully installed"
echo "See /usr/share/doc/piradio/README for release information"
echo

if [[ REBOOT -eq 1 ]]; then
	echo "It is necessary to reboot the system to start the radio"
fi

# End of post-installation script
